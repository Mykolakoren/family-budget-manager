version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-family_budget_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-family_budget_password}
      POSTGRES_DB: ${POSTGRES_DB:-family_budget}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - budget_network

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - budget_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-family_budget_user}:${POSTGRES_PASSWORD:-family_budget_password}@postgres:5432/${POSTGRES_DB:-family_budget}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - budget_network
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Telegram Bot
  bot:
    build:
      context: ./bot
      dockerfile: ../docker/bot.Dockerfile
    environment:
      - API_BASE_URL=http://backend:8000/api/v1
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - backend
    networks:
      - budget_network
    volumes:
      - ./bot:/app
    command: python main.py

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_TELEGRAM_BOT_USERNAME=${REACT_APP_TELEGRAM_BOT_USERNAME}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - budget_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start

volumes:
  postgres_data:

networks:
  budget_network:
    driver: bridge