# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
"""

import io
from datetime import datetime
from typing import Dict, Any
import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from parsers.transaction_parser import TransactionParser
from handlers.family_handlers import FamilyHandlers
from handlers.analytics_handlers import AnalyticsHandlers

logger = logging.getLogger(__name__)


class BotHandlers:
    """–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞"""

    def __init__(self, db_manager, ai_analyzer, user_manager, family_manager):
        self.db = db_manager
        self.ai = ai_analyzer
        self.user_manager = user_manager
        self.family_manager = family_manager

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.transaction_parser = TransactionParser(ai_analyzer, user_manager)
        self.family_handlers = FamilyHandlers(family_manager, user_manager)
        self.analytics_handlers = AnalyticsHandlers(family_manager, user_manager, ai_analyzer)

    def setup_handlers(self, application: Application) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("balance", self.balance_command))
        application.add_handler(CommandHandler("analyze", self.analytics_handlers.analyze_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("export", self.export_command))

        # –°–µ–º–µ–π–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("family", self.family_handlers.family_command))
        application.add_handler(CommandHandler("family_invite", self.family_handlers.family_invite_command))
        application.add_handler(CommandHandler("family_stats", self.family_handlers.family_stats_command))
        application.add_handler(CommandHandler("family_leave", self.family_handlers.family_leave_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        user_id = user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_manager.set_user_name(user_id, user.first_name)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_stats = self.user_manager.get_user_statistics(user_id)
        transactions = self.family_manager.get_family_transactions(user_id)
        total_transactions = len(transactions)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å–µ
        family_data = self.family_manager.get_family_data(user_id)
        family_info = f"\nüè† **–°–µ–º—å—è:** {family_data['name']}" if family_data else "\nüí° **–°–æ–≤–µ—Ç:** –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /family"

        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º!{family_info}

üî• **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}
üß† –ò–ò –æ–±—É—á–µ–Ω–∏–µ: {user_stats['learning_score']} –ø—Ä–∏–º–µ—Ä–æ–≤

ü§ñ **–ò–ò –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±—É—á–µ–Ω–∏–µ–º
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫

**–ö–æ–º–∞–Ω–¥—ã:**
/family - üè† —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç
/analyze - üß† –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç
/stats - üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
/export - üì§ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
/balance - üí∞ –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–æ–≤

**–ü–æ–ø—Ä–æ–±—É–π:**
‚Ä¢ "–ü–æ—Ç—Ä–∞—Ç–∏–ª 50 –ª–∞—Ä–∏ –Ω–∞ –µ–¥—É –≤ Carrefour"
‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–∏—Å–∫–∏ üìé
        """

        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã ID —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if user_data.get('waiting_for_family_id'):
            result = self.family_handlers.handle_family_id_input(user_id, text)
            user_data['waiting_for_family_id'] = False
            self.user_manager.update_user_data(user_id, user_data)

            await update.message.reply_text(result['message'], parse_mode='Markdown')
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        text_lower = text.lower()

        if any(word in text_lower for word in ['–ø–æ—Ç—Ä–∞—Ç–∏–ª', '–∫—É–ø–∏–ª', '–∑–∞–ø–ª–∞—Ç–∏–ª', '–ø–æ—Ç—Ä–∞—á–µ–Ω–æ']):
            await self._handle_expense(update, context)
        elif any(word in text_lower for word in ['–ø–æ–ª—É—á–∏–ª', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–¥–æ—Ö–æ–¥', '–∑–∞—Ä–∞–±–æ—Ç–∞–ª']):
            await self._handle_income(update, context)
        elif any(word in text_lower for word in ['—Å–∫–æ–ª—å–∫–æ', '–±–∞–ª–∞–Ω—Å', '–æ—Ç—á–µ—Ç', '–ø–æ–∫–∞–∂–∏', '—Ç–æ–ø']):
            await self._handle_question(update, context)
        else:
            await self._show_help_message(update)

    async def _handle_expense(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        text = update.message.text
        user_id = update.effective_user.id

        # –ü–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        parsed = await self.transaction_parser.parse_transaction_text(user_id, text)

        if not parsed:
            await update.message.reply_text("ü§î –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
            return

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥
        if parsed['amount'] > 0:
            parsed['amount'] = -parsed['amount']
            parsed['type'] = 'expense'

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = self.transaction_parser.create_transaction_dict(parsed)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        user_name = self.user_manager.get_user_name(user_id)
        if self.family_manager.add_family_transaction(user_id, transaction, user_name):
            await self._send_transaction_confirmation(update, parsed, '—Ä–∞—Å—Ö–æ–¥')
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    async def _handle_income(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        text = update.message.text
        user_id = update.effective_user.id

        # –ü–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        parsed = await self.transaction_parser.parse_transaction_text(user_id, text)

        if not parsed:
            await update.message.reply_text("ü§î –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ—Ö–æ–¥")
            return

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –¥–æ—Ö–æ–¥
        if parsed['amount'] < 0:
            parsed['amount'] = abs(parsed['amount'])
        parsed['type'] = 'income'

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = self.transaction_parser.create_transaction_dict(parsed)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        user_name = self.user_manager.get_user_name(user_id)
        if self.family_manager.add_family_transaction(user_id, transaction, user_name):
            await self._send_transaction_confirmation(update, parsed, '–¥–æ—Ö–æ–¥')
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    async def _send_transaction_confirmation(self, update: Update, parsed: Dict[str, Any], transaction_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        user_id = update.effective_user.id
        source_text = {
            'personal_ai': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò',
            'openai': '–ò–ò',
            'simple': '–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä'
        }.get(parsed.get('source'), '–°–∏—Å—Ç–µ–º–∞')

        reasoning = f" ({parsed.get('reasoning', '')})" if 'reasoning' in parsed else ""

        family_data = self.family_manager.get_family_data(user_id)
        family_info = f" –≤ –≥—Ä—É–ø–ø—É **{family_data['name']}**" if family_data else ""

        sign = '+' if parsed['amount'] > 0 else ''

        response = f"""
‚úÖ **{source_text} –¥–æ–±–∞–≤–∏–ª {transaction_type}:**{reasoning}

üí∞ {sign}{parsed['amount']:.2f} {parsed['currency']}
üè∑Ô∏è {parsed['category']}
üí≥ {parsed['account']}

üß† –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.get('confidence', 0.5) * 100:.0f}%
üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ{family_info}
        """

        await update.message.reply_text(response, parse_mode='Markdown')

    async def _handle_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = update.message.text.lower()
        user_id = update.effective_user.id

        if any(word in text for word in ['–±–∞–ª–∞–Ω—Å', '—Å—á–µ—Ç']):
            await self.balance_command(update, context)
        elif any(word in text for word in ['–∞–Ω–∞–ª–∏–∑', '—Å–æ–≤–µ—Ç']):
            await self.analytics_handlers.analyze_command(update, context)
        else:
            await update.message.reply_text(
                "ü§î –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å:\n"
                "‚Ä¢ –ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å\n"
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª?\n"
                "‚Ä¢ /analyze –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∞"
            )

    async def _show_help_message(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await update.message.reply_text(
            "ü§î –ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ \"–ü–æ—Ç—Ä–∞—Ç–∏–ª 50 –ª–∞—Ä–∏ –≤ Carrefour\" - –ò–ò –∑–∞–ø–æ–º–Ω–∏—Ç!\n"
            "‚Ä¢ \"–ü–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 1000 –¥–æ–ª–ª–∞—Ä–æ–≤\"\n"
            "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–∏—Å–∫–∏ üìé\n"
            "‚Ä¢ /family –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ üè†\n"
            "‚Ä¢ /analyze –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ ü§ñ"
        )

    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /balance"""
        user_id = update.effective_user.id

        balances = self.family_manager.get_family_balance_by_accounts(user_id)

        if not balances:
            family_data = self.family_manager.get_family_data(user_id)
            if family_data:
                await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å–µ–º–µ–π–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!")
            else:
                await update.message.reply_text(
                    "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n\n"
                    "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /family –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã!"
                )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        family_data = self.family_manager.get_family_data(user_id)
        if family_data:
            balance_text = f"üè† **{family_data['name']}**\n\nüí∞ **–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–æ–≤:**\n\n"
        else:
            balance_text = "üí∞ **–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–æ–≤:**\n\n"

        for account, balance in balances.items():
            emoji = "üí≥" if "Card" in account else "üíµ"
            balance_text += f"{emoji} {account}: {balance:,.2f}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.family_manager.get_family_statistics(user_id)
        balance_text += f"\nüìà –î–æ—Ö–æ–¥—ã: {stats['total_income']:,.2f}\n"
        balance_text += f"üìâ –†–∞—Å—Ö–æ–¥—ã: {stats['total_expenses']:,.2f}\n"
        balance_text += f"üíé –ë–∞–ª–∞–Ω—Å: {stats['total_balance']:,.2f}\n\n"

        if family_data:
            balance_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–µ–º—å–µ: {len(family_data['members'])}\n"
            balance_text += f"üìä –ö–æ–º–∞–Ω–¥–∞ /family_stats –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        else:
            balance_text += f"üí° –ö–æ–º–∞–Ω–¥–∞ /family –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã"

        await update.message.reply_text(balance_text, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        user_stats = self.user_manager.get_user_statistics(user_id)
        user_data = self.user_manager.get_user_data(user_id)
        ai_learning = user_data['ai_learning']

        stats_text = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        stats_text += f"üìÅ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {user_stats['total_transactions']}\n"
        stats_text += f"üí∏ –†–∞—Å—Ö–æ–¥–æ–≤: {user_stats['total_expenses']}\n"
        stats_text += f"üí∞ –î–æ—Ö–æ–¥–æ–≤: {user_stats['total_incomes']}\n\n"

        stats_text += "üß† **–ò–ò –æ–±—É—á–µ–Ω–∏–µ:**\n"
        stats_text += f"üìö –ò–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {user_stats['known_words']}\n"
        stats_text += f"üè™ –ó–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç: {user_stats['known_merchants']}\n"
        stats_text += f"üéØ –û–±—â–∏–π –æ–ø—ã—Ç: {user_stats['learning_score']} –ø—Ä–∏–º–µ—Ä–æ–≤\n"

        if ai_learning['merchant_categories']:
            stats_text += f"\nüè™ **–ó–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:**\n"
            for merchant, category in list(ai_learning['merchant_categories'].items())[:5]:
                stats_text += f"‚Ä¢ {merchant.title()} ‚Üí {category}\n"

        stats_text += f"\nüìÖ –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –±–æ—Ç–∞: {user_stats['days_using']} –¥–Ω–µ–π\n"
        stats_text += f"üìÑ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /export"""
        user_id = update.effective_user.id
        transactions = self.family_manager.get_family_transactions(user_id)

        if not transactions:
            await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {'transactions': transactions}
        csv_content = self.db.export_user_data(export_data, format='csv')

        filename = f"budget_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"

        family_data = self.family_manager.get_family_data(user_id)
        family_info = f"üè† –°–µ–º–µ–π–Ω–∞—è –≥—Ä—É–ø–ø–∞: {family_data['name']}\n" if family_data else ""

        user_stats = self.user_manager.get_user_statistics(user_id)

        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=io.BytesIO(csv_content),
            filename=filename,
            caption=f"üìä **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:**\n"
                    f"{family_info}"
                    f"üìÅ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
                    f"üß† –ò–ò –æ–±—É—á–µ–Ω–∏–µ: {user_stats['learning_score']} –ø—Ä–∏–º–µ—Ä–æ–≤",
            parse_mode='Markdown'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()

        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ–º–µ–π–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
        if await self.family_handlers.handle_callback_query(update, context):
            return

        # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", exc_info=context.error)

        if update and hasattr(update, 'effective_message') and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
                )
            except Exception:
                pass