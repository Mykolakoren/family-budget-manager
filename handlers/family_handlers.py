# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ–º–µ–π–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –±–æ—Ç–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)


class FamilyHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ–º–µ–π–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""

    def __init__(self, family_manager, user_manager):
        self.family = family_manager
        self.user_manager = user_manager

    async def family_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /family - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_manager.set_user_name(user_id, user_name)

        family_data = self.family.get_family_data(user_id)

        if family_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
            await self._show_family_info(update, family_data)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ
            await self._show_family_setup(update)

    async def _show_family_info(self, update: Update, family_data: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ"""
        user_id = update.effective_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        members_info = ""
        for member_id in family_data['members']:
            member_name = self.user_manager.get_user_name(member_id)
            role = "üëë –ê–¥–º–∏–Ω" if member_id == family_data['created_by'] else "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
            members_info += f"‚Ä¢ {member_name} - {role}\n"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        family_stats = self.family.get_family_statistics(user_id)

        response = f"""
üè† **–°–µ–º–µ–π–Ω–∞—è –≥—Ä—É–ø–ø–∞:** {family_data['name']}
üÜî **ID –≥—Ä—É–ø–ø—ã:** `{family_data['id']}`

üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(family_data['members'])}):**
{members_info}

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {family_stats['total_transactions']}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {family_stats['total_balance']:.2f} –ª–∞—Ä–∏
üìà –î–æ—Ö–æ–¥—ã: {family_stats['total_income']:.2f} –ª–∞—Ä–∏
üìâ –†–∞—Å—Ö–æ–¥—ã: {family_stats['total_expenses']:.2f} –ª–∞—Ä–∏

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/family_invite` - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–ª–µ–Ω–∞ —Å–µ–º—å–∏
‚Ä¢ `/family_stats` - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/family_leave` - –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É
        """

        await update.message.reply_text(response, parse_mode='Markdown')

    async def _show_family_setup(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ–º—å–∏"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–∫–∏–Ω—É—Ç—å", callback_data="confirm_leave_family"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_leave_family")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É **{family_data['name']}**?\n\n"
            f"–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        query = update.callback_query
        user_id = query.from_user.id
        user_name = query.from_user.first_name
        callback_data = query.data

        if callback_data == "create_family":
            try:
                family_id = self.family.create_family_group(user_id, f"–°–µ–º—å—è {user_name}")
                await query.edit_message_text(
                    f"üè† **–°–µ–º–µ–π–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                    f"**ID –≥—Ä—É–ø–ø—ã:** `{family_id}`\n\n"
                    f"üìã **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏:**\n"
                    f"1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º –∫–æ–º–∞–Ω–¥—É /family_invite\n"
                    f"2. –ò–ª–∏ –¥–∞–π—Ç–µ –∏–º —ç—Ç–æ—Ç ID: `{family_id}`\n\n"
                    f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ–±—â–∏–º–∏!",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return True

        elif callback_data == "join_family":
            await query.edit_message_text(
                "üë• **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ–º—å–µ**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –¥–∞–ª –∞–¥–º–∏–Ω:\n\n"
                "–ü—Ä–∏–º–µ—Ä: `abc12345`",
                parse_mode='Markdown'
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID
            user_data = self.user_manager.get_user_data(user_id)
            user_data['waiting_for_family_id'] = True
            self.user_manager.update_user_data(user_id, user_data)
            return True

        elif callback_data == "confirm_leave_family":
            if self.family.leave_family(user_id):
                await query.edit_message_text(
                    "‚úÖ **–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É**\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–Ω–æ–≤–∞ –±—É–¥—É—Ç –ª–∏—á–Ω—ã–º–∏.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π —á–µ—Ä–µ–∑ /family"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã")
            return True

        elif callback_data == "cancel_leave_family":
            await query.edit_message_text(
                "üè† –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø–µ!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /family –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π."
            )
            return True

        return False

    def handle_family_id_input(self, user_id: int, family_id_text: str) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        family_id = family_id_text.strip()

        if self.family.join_family_group(user_id, family_id):
            family_data = self.family.get_family_data(user_id)
            return {
                'success': True,
                'message': f"üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é!**\n\n"
                           f"**–ì—Ä—É–ø–ø–∞:** {family_data['name']}\n"
                           f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(family_data['members'])}\n\n"
                           f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –≤–∏–¥–∏—Ç–µ –≤—Å–µ —Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!\n"
                           f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"
            }
        else:
            return {
                'success': False,
                'message': f"‚ùå **–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
                           f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID: `{family_id}`\n"
                           f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É –≥—Ä—É–ø–ø—ã"
            }üè† –°–æ–∑–¥–∞—Ç—å
            —Å–µ–º—å—é
            ", callback_data="
            create_family
            "),
            InlineKeyboardButton("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_family")
        ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üè† **–°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç**\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞!\n\n"
            "**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
            "‚Ä¢ üë• –û–±—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏\n"
            "‚Ä¢ üìä –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ ü§ñ –ò–ò –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–π —Å–µ–º—å–∏\n"
            "‚Ä¢ üìà –û—Ç—á–µ—Ç—ã –ø–æ –¥–Ω—è–º, –Ω–µ–¥–µ–ª—è–º, –º–µ—Å—è—Ü–∞–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        async

        def family_invite_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

            """–ö–æ–º–∞–Ω–¥–∞ /family_invite"""
        user_id = update.effective_user.id
        family_data = self.family.get_family_data(user_id)

        if not family_data:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /family")
            return

        if not self.family.is_family_admin(user_id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        bot_username = context.bot.username or "YourBotName"
        invite_text = f"""
üè† **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É**

**–ù–∞–∑–≤–∞–Ω–∏–µ:** {family_data['name']}
**ID –≥—Ä—É–ø–ø—ã:** `{family_data['id']}`

üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:**
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ @{bot_username}
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/family`
3. –ù–∞–∂–º–∏—Ç–µ "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
4. –í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: `{family_data['id']}`

‚úÖ –ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!
        """

        await update.message.reply_text(invite_text, parse_mode='Markdown')

    async def family_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /family_stats"""
        user_id = update.effective_user.id

        stats = self.family.get_detailed_family_stats(user_id)

        if not stats:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /family")
            return

        response = f"""
üè† **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å–µ–º–µ–π–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìÖ **–ó–∞ –Ω–µ–¥–µ–ª—é:**
üí∏ –†–∞—Å—Ö–æ–¥—ã: {stats['week']['expenses']:.2f} –ª–∞—Ä–∏
üí∞ –î–æ—Ö–æ–¥—ã: {stats['week']['income']:.2f} –ª–∞—Ä–∏
üíé –ë–∞–ª–∞–Ω—Å: {stats['week']['balance']:+.2f} –ª–∞—Ä–∏

üìÖ **–ó–∞ –º–µ—Å—è—Ü:**
üí∏ –†–∞—Å—Ö–æ–¥—ã: {stats['month']['expenses']:.2f} –ª–∞—Ä–∏
üí∞ –î–æ—Ö–æ–¥—ã: {stats['month']['income']:.2f} –ª–∞—Ä–∏
üíé –ë–∞–ª–∞–Ω—Å: {stats['month']['balance']:+.2f} –ª–∞—Ä–∏

üë• **–ü–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–º–µ—Å—è—Ü):**
"""

        for member, member_stats in stats['by_member'].items():
            response += f"‚Ä¢ {member}: {member_stats['count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {member_stats['expenses']:.0f} –ª–∞—Ä–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"

        if stats['top_categories']:
            response += f"\nüî• **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–µ—Å—è—Ü):**\n"
            for category, amount in stats['top_categories']:
                response += f"‚Ä¢ {category}: {amount:.2f} –ª–∞—Ä–∏\n"

        response += f"\nü§ñ –ö–æ–º–∞–Ω–¥–∞ /analyze –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–º–µ–π–Ω—ã—Ö —Ç—Ä–∞—Ç"

        await update.message.reply_text(response, parse_mode='Markdown')

    async def family_leave_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /family_leave"""
        user_id = update.effective_user.id
        family_data = self.family.get_family_data(user_id)

        if not family_data:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø–µ")
            return

        keyboard = [
            [
                InlineKeyboardButton("