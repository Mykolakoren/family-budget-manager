# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –±–æ—Ç–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
"""

from telegram import Update
from telegram.ext import ContextTypes
from collections import defaultdict
import logging

logger = logging.getLogger(__name__)


class AnalyticsHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""

    def __init__(self, family_manager, user_manager, ai_analyzer):
        self.family = family_manager
        self.user_manager = user_manager
        self.ai = ai_analyzer

    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /analyze - –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç"""
        user_id = update.effective_user.id

        transactions = self.family.get_family_transactions(user_id)

        if len(transactions) < 5:
            family_data = self.family.get_family_data(user_id)
            family_hint = "\n‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /family" if not family_data else ""

            await update.message.reply_text(
                "ü§ñ **–î–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.**\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ:\n"
                "‚Ä¢ \"–ü–æ—Ç—Ä–∞—Ç–∏–ª 50 –ª–∞—Ä–∏ –Ω–∞ –µ–¥—É\"\n"
                "‚Ä¢ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤—ã–ø–∏—Å–∫–∏\n"
                "‚Ä¢ /balance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö" + family_hint
            )
            return

        await update.message.reply_text("ü§ñ **–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ...**\n–î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É! üß†")

        # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
        analysis = await self.ai.analyze_spending_patterns(transactions)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        user_data = self.user_manager.get_user_data(user_id)
        learning_stats = user_data['ai_learning']

        family_data = self.family.get_family_data(user_id)
        family_prefix = f"üè† **{family_data['name']}** - " if family_data else ""

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        mood_emoji = {
            'positive': 'üòä',
            'neutral': 'üòê',
            'concern': 'üòü'
        }

        emoji = mood_emoji.get(analysis['mood'], 'ü§ñ')

        response = f"{emoji} **{family_prefix}–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑:**\n\n"
        response += f"üìä {analysis['analysis']}\n\n"
        response += f"üî• **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {analysis['top_category']}\n\n"
        response += "üí° **–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"

        for i, advice in enumerate(analysis['advice'], 1):
            response += f"{i}. {advice}\n"

        response += f"\nüß† **–û–±—É—á–µ–Ω–∏–µ –ò–ò:**\n"
        response += f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ {len(learning_stats['category_preferences'])} —Å–ª–æ–≤\n"
        response += f"‚Ä¢ –ó–∞–ø–æ–º–Ω–µ–Ω–æ {len(learning_stats['merchant_categories'])} –º–µ—Å—Ç\n"
        response += f"‚Ä¢ –û–±—â–∏–π –æ–ø—ã—Ç: {learning_stats['learning_score']} –ø—Ä–∏–º–µ—Ä–æ–≤\n\n"

        if family_data:
            response += f"üë• **–°–µ–º–µ–π–Ω–∞—è –≥—Ä—É–ø–ø–∞:** {len(family_data['members'])} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            response += f"üìä /family_stats –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–µ–º–µ–π–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"

        response += f"üéØ **–¢–æ—á–Ω–æ—Å—Ç—å –ò–ò —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π!**"

        await update.message.reply_text(response, parse_mode='Markdown')

    async def show_spending_summary(self, update: Update, transactions: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ç—Ä–∞—Ç"""
        expenses = [t for t in transactions if t['amount'] < 0]

        if not expenses:
            await update.message.reply_text("üí∞ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤!")
            return

        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from datetime import datetime, timedelta
        today = datetime.now()
        month_ago = today - timedelta(days=30)

        recent_expenses = []
        for trans in expenses:
            try:
                trans_date = datetime.strptime(trans['date'][:10], '%Y-%m-%d')
                if trans_date >= month_ago:
                    recent_expenses.append(trans)
            except (ValueError, KeyError):
                continue

        total_month = sum(abs(t['amount']) for t in recent_expenses)
        total_all = sum(abs(t['amount']) for t in expenses)

        summary = f"üí∏ **–¢–≤–æ–∏ —Ç—Ä–∞—Ç—ã:**\n\n"
        summary += f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {total_month:,.2f} –ª–∞—Ä–∏\n"
        summary += f"üìä –í—Å–µ–≥–æ: {total_all:,.2f} –ª–∞—Ä–∏\n"
        summary += f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(expenses)}\n\n"

        if recent_expenses:
            avg_daily = total_month / 30
            summary += f"üìà –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {avg_daily:.2f} –ª–∞—Ä–∏\n\n"

        summary += "ü§ñ –ö–æ–º–∞–Ω–¥–∞ /analyze –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∞!"

        await update.message.reply_text(summary, parse_mode='Markdown')

    async def show_top_categories(self, update: Update, transactions: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç"""
        expenses = [t for t in transactions if t['amount'] < 0]

        if not expenses:
            await update.message.reply_text("üí∞ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤!")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
        by_category = defaultdict(float)
        for trans in expenses[-30:]:
            by_category[trans['category']] += abs(trans['amount'])

        sorted_categories = sorted(by_category.items(), key=lambda x: x[1], reverse=True)

        response = "üî• **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:**\n\n"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        emojis = {
            '–ï–¥–∞': 'üçΩÔ∏è',
            '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöó',
            '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üé¨',
            '–ó–¥–æ—Ä–æ–≤—å–µ': 'üíä',
            '–û–¥–µ–∂–¥–∞': 'üëï',
            '–¢–µ—Ö–Ω–∏–∫–∞': 'üì±',
            '–ü—Ä–æ—á–µ–µ': 'üì¶'
        }

        for i, (category, amount) in enumerate(sorted_categories[:5], 1):
            emoji = emojis.get(category, 'üì¶')
            percentage = (amount / sum(by_category.values())) * 100
            response += f"{i}. {emoji} {category}: {amount:.2f} –ª–∞—Ä–∏ ({percentage:.1f}%)\n"

        response += f"\nü§ñ /analyze –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤!"

        await update.message.reply_text(response, parse_mode='Markdown')

    def get_insights_from_transactions(self, transactions: list) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if not transactions:
            return {}

        expenses = [t for t in transactions if t['amount'] < 0]
        incomes = [t for t in transactions if t['amount'] > 0]

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_expenses = sum(abs(t['amount']) for t in expenses)
        total_incomes = sum(t['amount'] for t in incomes)

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        by_category = defaultdict(float)
        for trans in expenses:
            by_category[trans['category']] += abs(trans['amount'])

        top_category = max(by_category.items(), key=lambda x: x[1])[0] if by_category else None

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        from datetime import datetime, timedelta
        today = datetime.now()
        week_ago = today - timedelta(days=7)

        week_expenses = []
        for trans in expenses:
            try:
                trans_date = datetime.strptime(trans['date'][:10], '%Y-%m-%d')
                if trans_date >= week_ago:
                    week_expenses.append(trans)
            except (ValueError, KeyError):
                continue

        week_total = sum(abs(t['amount']) for t in week_expenses)
        daily_average = week_total / 7 if week_expenses else 0

        return {
            'total_expenses': total_expenses,
            'total_incomes': total_incomes,
            'balance': total_incomes - total_expenses,
            'top_category': top_category,
            'categories_count': len(by_category),
            'weekly_spending': week_total,
            'daily_average': daily_average,
            'transactions_count': len(transactions)
        }