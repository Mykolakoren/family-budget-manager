# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
"""

import json
import os
import shutil
import csv
import io
from datetime import datetime
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, data_file: str = "budget_data.json"):
        self.data_file = data_file
        self.backup_file = f"{data_file}.backup"
        self._data_cache = None
        self._last_save_time = None

    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if self._data_cache is not None:
            return self._data_cache

        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self._data_cache = json.load(f)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.data_file}")
                return self._data_cache
            else:
                print(f"üìÅ –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.data_file}")
                self._data_cache = self._create_empty_database()
                return self._data_cache
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
            return self._restore_from_backup()

    def save_data(self, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(self.data_file):
                shutil.copy2(self.data_file, self.backup_file)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._data_cache = data
            self._last_save_time = datetime.now()

            file_size = os.path.getsize(self.data_file)
            print(f"üíæ –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_size} –±–∞–π—Ç")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")
            return False

    def _create_empty_database(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'users': {},
            'families': {},
            'metadata': {
                'created_at': datetime.now().isoformat(),
                'version': '1.0'
            }
        }

    def _restore_from_backup(self) -> Dict[str, Any]:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞"""
        try:
            if os.path.exists(self.backup_file):
                with open(self.backup_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                print("üîÑ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–∞")
                self._data_cache = data
                return data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞: {e}")

        print("‚ö†Ô∏è –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        return self._create_empty_database()

    def export_user_data(self, user_data: Dict[str, Any], format: str = 'csv') -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if format == 'csv':
            return self._export_to_csv(user_data)
        elif format == 'json':
            return self._export_to_json(user_data)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format}")

    def _export_to_csv(self, user_data: Dict[str, Any]) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        output = io.StringIO()
        writer = csv.writer(output)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            '–î–∞—Ç–∞', '–°—É–º–º–∞', '–í–∞–ª—é—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            '–°—á–µ—Ç', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¢–∏–ø', '–ò—Å—Ç–æ—á–Ω–∏–∫'
        ])

        # –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        for transaction in user_data.get('transactions', []):
            writer.writerow([
                transaction.get('date', ''),
                transaction.get('amount', 0),
                transaction.get('currency', 'GEL'),
                transaction.get('category', ''),
                transaction.get('account', ''),
                transaction.get('description', ''),
                transaction.get('type', ''),
                transaction.get('source', '')
            ])

        return output.getvalue().encode('utf-8')

    def _export_to_json(self, user_data: Dict[str, Any]) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        export_data = {
            'transactions': user_data.get('transactions', []),
            'ai_learning': user_data.get('ai_learning', {}),
            'export_date': datetime.now().isoformat()
        }
        return json.dumps(export_data, ensure_ascii=False, indent=2).encode('utf-8')

    def get_user_data(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = self.load_data()
        return data.get('users', {}).get(str(user_id))

    def update_user_data(self, user_id: int, user_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = self.load_data()
        if 'users' not in data:
            data['users'] = {}

        data['users'][str(user_id)] = user_data
        return self.save_data(data)

    def get_family_data(self, family_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–º—å–∏"""
        data = self.load_data()
        return data.get('families', {}).get(family_id)

    def update_family_data(self, family_id: str, family_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–º—å–∏"""
        data = self.load_data()
        if 'families' not in data:
            data['families'] = {}

        data['families'][family_id] = family_data
        return self.save_data(data)

    def delete_family(self, family_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Å–µ–º—å—é"""
        data = self.load_data()
        if 'families' in data and family_id in data['families']:
            del data['families'][family_id]
            return self.save_data(data)
        return False

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        data = self.load_data()

        total_users = len(data.get('users', {}))
        total_families = len(data.get('families', {}))

        total_transactions = 0
        for user_data in data.get('users', {}).values():
            total_transactions += len(user_data.get('transactions', []))

        for family_data in data.get('families', {}).values():
            total_transactions += len(family_data.get('transactions', []))

        return {
            'total_users': total_users,
            'total_families': total_families,
            'total_transactions': total_transactions,
            'database_size': os.path.getsize(self.data_file) if os.path.exists(self.data_file) else 0,
            'last_save': self._last_save_time.isoformat() if self._last_save_time else None
        }